{"ast":null,"code":"/*\n * Copyright 2015 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n(function (define) {\n  'use strict';\n\n  define(function\n    /* require */\n  () {\n    var charMap;\n\n    charMap = function () {\n      var strings = {\n        alpha: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n        digit: '0123456789'\n      };\n      strings.genDelims = ':/?#[]@';\n      strings.subDelims = '!$&\\'()*+,;=';\n      strings.reserved = strings.genDelims + strings.subDelims;\n      strings.unreserved = strings.alpha + strings.digit + '-._~';\n      strings.url = strings.reserved + strings.unreserved;\n      strings.scheme = strings.alpha + strings.digit + '+-.';\n      strings.userinfo = strings.unreserved + strings.subDelims + ':';\n      strings.host = strings.unreserved + strings.subDelims;\n      strings.port = strings.digit;\n      strings.pchar = strings.unreserved + strings.subDelims + ':@';\n      strings.segment = strings.pchar;\n      strings.path = strings.segment + '/';\n      strings.query = strings.pchar + '/?';\n      strings.fragment = strings.pchar + '/?';\n      return Object.keys(strings).reduce(function (charMap, set) {\n        charMap[set] = strings[set].split('').reduce(function (chars, myChar) {\n          chars[myChar] = true;\n          return chars;\n        }, {});\n        return charMap;\n      }, {});\n    }();\n\n    function encode(str, allowed) {\n      if (typeof str !== 'string') {\n        throw new Error('String required for URL encoding');\n      }\n\n      return str.split('').map(function (myChar) {\n        if (allowed.hasOwnProperty(myChar)) {\n          return myChar;\n        }\n\n        var code = myChar.charCodeAt(0);\n\n        if (code <= 127) {\n          var encoded = code.toString(16).toUpperCase();\n          return '%' + (encoded.length % 2 === 1 ? '0' : '') + encoded;\n        } else {\n          return encodeURIComponent(myChar).toUpperCase();\n        }\n      }).join('');\n    }\n\n    function makeEncoder(allowed) {\n      allowed = allowed || charMap.unreserved;\n      return function (str) {\n        return encode(str, allowed);\n      };\n    }\n\n    function decode(str) {\n      return decodeURIComponent(str);\n    }\n\n    return {\n      /*\n       * Decode URL encoded strings\n       *\n       * @param {string} URL encoded string\n       * @returns {string} URL decoded string\n       */\n      decode: decode,\n\n      /*\n       * URL encode a string\n       *\n       * All but alpha-numerics and a very limited set of punctuation - . _ ~ are\n       * encoded.\n       *\n       * @param {string} string to encode\n       * @returns {string} URL encoded string\n       */\n      encode: makeEncoder(),\n\n      /*\n      * URL encode a URL\n      *\n      * All character permitted anywhere in a URL are left unencoded even\n      * if that character is not permitted in that portion of a URL.\n      *\n      * Note: This method is typically not what you want.\n      *\n      * @param {string} string to encode\n      * @returns {string} URL encoded string\n      */\n      encodeURL: makeEncoder(charMap.url),\n\n      /*\n       * URL encode the scheme portion of a URL\n       *\n       * @param {string} string to encode\n       * @returns {string} URL encoded string\n       */\n      encodeScheme: makeEncoder(charMap.scheme),\n\n      /*\n       * URL encode the user info portion of a URL\n       *\n       * @param {string} string to encode\n       * @returns {string} URL encoded string\n       */\n      encodeUserInfo: makeEncoder(charMap.userinfo),\n\n      /*\n       * URL encode the host portion of a URL\n       *\n       * @param {string} string to encode\n       * @returns {string} URL encoded string\n       */\n      encodeHost: makeEncoder(charMap.host),\n\n      /*\n       * URL encode the port portion of a URL\n       *\n       * @param {string} string to encode\n       * @returns {string} URL encoded string\n       */\n      encodePort: makeEncoder(charMap.port),\n\n      /*\n       * URL encode a path segment portion of a URL\n       *\n       * @param {string} string to encode\n       * @returns {string} URL encoded string\n       */\n      encodePathSegment: makeEncoder(charMap.segment),\n\n      /*\n       * URL encode the path portion of a URL\n       *\n       * @param {string} string to encode\n       * @returns {string} URL encoded string\n       */\n      encodePath: makeEncoder(charMap.path),\n\n      /*\n       * URL encode the query portion of a URL\n       *\n       * @param {string} string to encode\n       * @returns {string} URL encoded string\n       */\n      encodeQuery: makeEncoder(charMap.query),\n\n      /*\n       * URL encode the fragment portion of a URL\n       *\n       * @param {string} string to encode\n       * @returns {string} URL encoded string\n       */\n      encodeFragment: makeEncoder(charMap.fragment)\n    };\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory(require);\n} // Boilerplate for AMD and Node\n);","map":{"version":3,"names":["define","charMap","strings","alpha","digit","genDelims","subDelims","reserved","unreserved","url","scheme","userinfo","host","port","pchar","segment","path","query","fragment","Object","keys","reduce","set","split","chars","myChar","encode","str","allowed","Error","map","hasOwnProperty","code","charCodeAt","encoded","toString","toUpperCase","length","encodeURIComponent","join","makeEncoder","decode","decodeURIComponent","encodeURL","encodeScheme","encodeUserInfo","encodeHost","encodePort","encodePathSegment","encodePath","encodeQuery","encodeFragment","amd","factory","module","exports","require"],"sources":["D:/Chronicle/chronicle-ttm/src/main/frontend/node_modules/rest/util/uriEncoder.js"],"sourcesContent":["/*\n * Copyright 2015 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (/* require */) {\n\n\t\tvar charMap;\n\n\t\tcharMap = (function () {\n\t\t\tvar strings = {\n\t\t\t\talpha: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n\t\t\t\tdigit: '0123456789'\n\t\t\t};\n\n\t\t\tstrings.genDelims = ':/?#[]@';\n\t\t\tstrings.subDelims = '!$&\\'()*+,;=';\n\t\t\tstrings.reserved = strings.genDelims + strings.subDelims;\n\t\t\tstrings.unreserved = strings.alpha + strings.digit + '-._~';\n\t\t\tstrings.url = strings.reserved + strings.unreserved;\n\t\t\tstrings.scheme = strings.alpha + strings.digit + '+-.';\n\t\t\tstrings.userinfo = strings.unreserved + strings.subDelims + ':';\n\t\t\tstrings.host = strings.unreserved + strings.subDelims;\n\t\t\tstrings.port = strings.digit;\n\t\t\tstrings.pchar = strings.unreserved + strings.subDelims + ':@';\n\t\t\tstrings.segment = strings.pchar;\n\t\t\tstrings.path = strings.segment + '/';\n\t\t\tstrings.query = strings.pchar + '/?';\n\t\t\tstrings.fragment = strings.pchar + '/?';\n\n\t\t\treturn Object.keys(strings).reduce(function (charMap, set) {\n\t\t\t\tcharMap[set] = strings[set].split('').reduce(function (chars, myChar) {\n\t\t\t\t\tchars[myChar] = true;\n\t\t\t\t\treturn chars;\n\t\t\t\t}, {});\n\t\t\t\treturn charMap;\n\t\t\t}, {});\n\t\t}());\n\n\t\tfunction encode(str, allowed) {\n\t\t\tif (typeof str !== 'string') {\n\t\t\t\tthrow new Error('String required for URL encoding');\n\t\t\t}\n\t\t\treturn str.split('').map(function (myChar) {\n\t\t\t\tif (allowed.hasOwnProperty(myChar)) {\n\t\t\t\t\treturn myChar;\n\t\t\t\t}\n\t\t\t\tvar code = myChar.charCodeAt(0);\n\t\t\t\tif (code <= 127) {\n\t\t\t\t\tvar encoded = code.toString(16).toUpperCase();\n\t\t\t\t\treturn '%' + (encoded.length % 2 === 1 ? '0' : '') + encoded;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn encodeURIComponent(myChar).toUpperCase();\n\t\t\t\t}\n\t\t\t}).join('');\n\t\t}\n\n\t\tfunction makeEncoder(allowed) {\n\t\t\tallowed = allowed || charMap.unreserved;\n\t\t\treturn function (str) {\n\t\t\t\treturn encode(str, allowed);\n\t\t\t};\n\t\t}\n\n\t\tfunction decode(str) {\n\t\t\treturn decodeURIComponent(str);\n\t\t}\n\n\t\treturn {\n\n\t\t\t/*\n\t\t\t * Decode URL encoded strings\n\t\t\t *\n\t\t\t * @param {string} URL encoded string\n\t\t\t * @returns {string} URL decoded string\n\t\t\t */\n\t\t\tdecode: decode,\n\n\t\t\t/*\n\t\t\t * URL encode a string\n\t\t\t *\n\t\t\t * All but alpha-numerics and a very limited set of punctuation - . _ ~ are\n\t\t\t * encoded.\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencode: makeEncoder(),\n\n\t\t\t/*\n\t\t\t* URL encode a URL\n\t\t\t*\n\t\t\t* All character permitted anywhere in a URL are left unencoded even\n\t\t\t* if that character is not permitted in that portion of a URL.\n\t\t\t*\n\t\t\t* Note: This method is typically not what you want.\n\t\t\t*\n\t\t\t* @param {string} string to encode\n\t\t\t* @returns {string} URL encoded string\n\t\t\t*/\n\t\t\tencodeURL: makeEncoder(charMap.url),\n\n\t\t\t/*\n\t\t\t * URL encode the scheme portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodeScheme: makeEncoder(charMap.scheme),\n\n\t\t\t/*\n\t\t\t * URL encode the user info portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodeUserInfo: makeEncoder(charMap.userinfo),\n\n\t\t\t/*\n\t\t\t * URL encode the host portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodeHost: makeEncoder(charMap.host),\n\n\t\t\t/*\n\t\t\t * URL encode the port portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodePort: makeEncoder(charMap.port),\n\n\t\t\t/*\n\t\t\t * URL encode a path segment portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodePathSegment: makeEncoder(charMap.segment),\n\n\t\t\t/*\n\t\t\t * URL encode the path portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodePath: makeEncoder(charMap.path),\n\n\t\t\t/*\n\t\t\t * URL encode the query portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodeQuery: makeEncoder(charMap.query),\n\n\t\t\t/*\n\t\t\t * URL encode the fragment portion of a URL\n\t\t\t *\n\t\t\t * @param {string} string to encode\n\t\t\t * @returns {string} URL encoded string\n\t\t\t */\n\t\t\tencodeFragment: makeEncoder(charMap.fragment)\n\n\t\t};\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}