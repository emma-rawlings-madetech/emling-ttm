{"ast":null,"code":"/*\n * Copyright 2012-2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n(function (define) {\n  'use strict';\n\n  define(function (require) {\n    var interceptor, mime, registry, noopConverter, when;\n    interceptor = require('../interceptor');\n    mime = require('../mime');\n    registry = require('../mime/registry');\n    when = require('when');\n    noopConverter = {\n      read: function read(obj) {\n        return obj;\n      },\n      write: function write(obj) {\n        return obj;\n      }\n    };\n    /**\n     * MIME type support for request and response entities.  Entities are\n     * (de)serialized using the converter for the MIME type.\n     *\n     * Request entities are converted using the desired converter and the\n     * 'Accept' request header prefers this MIME.\n     *\n     * Response entities are converted based on the Content-Type response header.\n     *\n     * @param {Client} [client] client to wrap\n     * @param {string} [config.mime='text/plain'] MIME type to encode the request\n     *   entity\n     * @param {string} [config.accept] Accept header for the request\n     * @param {Client} [config.client=<request.originator>] client passed to the\n     *   converter, defaults to the client originating the request\n     * @param {Registry} [config.registry] MIME registry, defaults to the root\n     *   registry\n     * @param {boolean} [config.permissive] Allow an unkown request MIME type\n     *\n     * @returns {Client}\n     */\n\n    return interceptor({\n      init: function init(config) {\n        config.registry = config.registry || registry;\n        return config;\n      },\n      request: function request(_request, config) {\n        var type, headers;\n        headers = _request.headers || (_request.headers = {});\n        type = mime.parse(headers['Content-Type'] = headers['Content-Type'] || config.mime || 'text/plain');\n        headers.Accept = headers.Accept || config.accept || type.raw + ', application/json;q=0.8, text/plain;q=0.5, */*;q=0.2';\n\n        if (!('entity' in _request)) {\n          return _request;\n        }\n\n        return config.registry.lookup(type).otherwise(function () {\n          // failed to resolve converter\n          if (config.permissive) {\n            return noopConverter;\n          }\n\n          throw 'mime-unknown';\n        }).then(function (converter) {\n          var client = config.client || _request.originator;\n          return when.attempt(converter.write, _request.entity, {\n            client: client,\n            request: _request,\n            mime: type,\n            registry: config.registry\n          }).otherwise(function () {\n            throw 'mime-serialization';\n          }).then(function (entity) {\n            _request.entity = entity;\n            return _request;\n          });\n        });\n      },\n      response: function response(_response, config) {\n        if (!(_response.headers && _response.headers['Content-Type'] && _response.entity)) {\n          return _response;\n        }\n\n        var type = mime.parse(_response.headers['Content-Type']);\n        return config.registry.lookup(type).otherwise(function () {\n          return noopConverter;\n        }).then(function (converter) {\n          var client = config.client || _response.request && _response.request.originator;\n          return when.attempt(converter.read, _response.entity, {\n            client: client,\n            response: _response,\n            mime: type,\n            registry: config.registry\n          }).otherwise(function (e) {\n            _response.error = 'mime-deserialization';\n            _response.cause = e;\n            throw _response;\n          }).then(function (entity) {\n            _response.entity = entity;\n            return _response;\n          });\n        });\n      }\n    });\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory(require);\n} // Boilerplate for AMD and Node\n);","map":{"version":3,"names":["define","require","interceptor","mime","registry","noopConverter","when","read","obj","write","init","config","request","type","headers","parse","Accept","accept","raw","lookup","otherwise","permissive","then","converter","client","originator","attempt","entity","response","e","error","cause","amd","factory","module","exports"],"sources":["D:/Chronicle/chronicle-ttm/src/main/frontend/node_modules/rest/interceptor/mime.js"],"sourcesContent":["/*\n * Copyright 2012-2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar interceptor, mime, registry, noopConverter, when;\n\n\t\tinterceptor = require('../interceptor');\n\t\tmime = require('../mime');\n\t\tregistry = require('../mime/registry');\n\t\twhen = require('when');\n\n\t\tnoopConverter = {\n\t\t\tread: function (obj) { return obj; },\n\t\t\twrite: function (obj) { return obj; }\n\t\t};\n\n\t\t/**\n\t\t * MIME type support for request and response entities.  Entities are\n\t\t * (de)serialized using the converter for the MIME type.\n\t\t *\n\t\t * Request entities are converted using the desired converter and the\n\t\t * 'Accept' request header prefers this MIME.\n\t\t *\n\t\t * Response entities are converted based on the Content-Type response header.\n\t\t *\n\t\t * @param {Client} [client] client to wrap\n\t\t * @param {string} [config.mime='text/plain'] MIME type to encode the request\n\t\t *   entity\n\t\t * @param {string} [config.accept] Accept header for the request\n\t\t * @param {Client} [config.client=<request.originator>] client passed to the\n\t\t *   converter, defaults to the client originating the request\n\t\t * @param {Registry} [config.registry] MIME registry, defaults to the root\n\t\t *   registry\n\t\t * @param {boolean} [config.permissive] Allow an unkown request MIME type\n\t\t *\n\t\t * @returns {Client}\n\t\t */\n\t\treturn interceptor({\n\t\t\tinit: function (config) {\n\t\t\t\tconfig.registry = config.registry || registry;\n\t\t\t\treturn config;\n\t\t\t},\n\t\t\trequest: function (request, config) {\n\t\t\t\tvar type, headers;\n\n\t\t\t\theaders = request.headers || (request.headers = {});\n\t\t\t\ttype = mime.parse(headers['Content-Type'] = headers['Content-Type'] || config.mime || 'text/plain');\n\t\t\t\theaders.Accept = headers.Accept || config.accept || type.raw + ', application/json;q=0.8, text/plain;q=0.5, */*;q=0.2';\n\n\t\t\t\tif (!('entity' in request)) {\n\t\t\t\t\treturn request;\n\t\t\t\t}\n\n\t\t\t\treturn config.registry.lookup(type).otherwise(function () {\n\t\t\t\t\t// failed to resolve converter\n\t\t\t\t\tif (config.permissive) {\n\t\t\t\t\t\treturn noopConverter;\n\t\t\t\t\t}\n\t\t\t\t\tthrow 'mime-unknown';\n\t\t\t\t}).then(function (converter) {\n\t\t\t\t\tvar client = config.client || request.originator;\n\n\t\t\t\t\treturn when.attempt(converter.write, request.entity, { client: client, request: request, mime: type, registry: config.registry })\n\t\t\t\t\t\t.otherwise(function() {\n\t\t\t\t\t\t\tthrow 'mime-serialization';\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function(entity) {\n\t\t\t\t\t\t\trequest.entity = entity;\n\t\t\t\t\t\t\treturn request;\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\tresponse: function (response, config) {\n\t\t\t\tif (!(response.headers && response.headers['Content-Type'] && response.entity)) {\n\t\t\t\t\treturn response;\n\t\t\t\t}\n\n\t\t\t\tvar type = mime.parse(response.headers['Content-Type']);\n\n\t\t\t\treturn config.registry.lookup(type).otherwise(function () { return noopConverter; }).then(function (converter) {\n\t\t\t\t\tvar client = config.client || response.request && response.request.originator;\n\n\t\t\t\t\treturn when.attempt(converter.read, response.entity, { client: client, response: response, mime: type, registry: config.registry })\n\t\t\t\t\t\t.otherwise(function (e) {\n\t\t\t\t\t\t\tresponse.error = 'mime-deserialization';\n\t\t\t\t\t\t\tresponse.cause = e;\n\t\t\t\t\t\t\tthrow response;\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function (entity) {\n\t\t\t\t\t\t\tresponse.entity = entity;\n\t\t\t\t\t\t\treturn response;\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}