{"ast":null,"code":"/*\n * Copyright 2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n(function (define) {\n  'use strict';\n\n  var undef;\n  define(function (require) {\n    /**\n     * Plain JS Object containing properties that represent an HTTP request.\n     *\n     * Depending on the capabilities of the underlying client, a request\n     * may be cancelable. If a request may be canceled, the client will add\n     * a canceled flag and cancel function to the request object. Canceling\n     * the request will put the response into an error state.\n     *\n     * @field {string} [method='GET'] HTTP method, commonly GET, POST, PUT, DELETE or HEAD\n     * @field {string|UrlBuilder} [path=''] path template with optional path variables\n     * @field {Object} [params] parameters for the path template and query string\n     * @field {Object} [headers] custom HTTP headers to send, in addition to the clients default headers\n     * @field [entity] the HTTP entity, common for POST or PUT requests\n     * @field {boolean} [canceled] true if the request has been canceled, set by the client\n     * @field {Function} [cancel] cancels the request if invoked, provided by the client\n     * @field {Client} [originator] the client that first handled this request, provided by the interceptor\n     *\n     * @class Request\n     */\n\n    /**\n     * Plain JS Object containing properties that represent an HTTP response\n     *\n     * @field {Object} [request] the request object as received by the root client\n     * @field {Object} [raw] the underlying request object, like XmlHttpRequest in a browser\n     * @field {number} [status.code] status code of the response (i.e. 200, 404)\n     * @field {string} [status.text] status phrase of the response\n     * @field {Object] [headers] response headers hash of normalized name, value pairs\n     * @field [entity] the response body\n     *\n     * @class Response\n     */\n\n    /**\n     * HTTP client particularly suited for RESTful operations.\n     *\n     * @field {function} wrap wraps this client with a new interceptor returning the wrapped client\n     *\n     * @param {Request} the HTTP request\n     * @returns {ResponsePromise<Response>} a promise the resolves to the HTTP response\n     *\n     * @class Client\n     */\n\n    /**\n     * Extended when.js Promises/A+ promise with HTTP specific helpers\n     *q\n     * @method entity promise for the HTTP entity\n     * @method status promise for the HTTP status code\n     * @method headers promise for the HTTP response headers\n     * @method header promise for a specific HTTP response header\n     *\n     * @class ResponsePromise\n     * @extends Promise\n     */\n    var client, target, platformDefault;\n    client = require('../client');\n    /**\n     * Make a request with the default client\n     * @param {Request} the HTTP request\n     * @returns {Promise<Response>} a promise the resolves to the HTTP response\n     */\n\n    function defaultClient() {\n      return target.apply(undef, arguments);\n    }\n    /**\n     * Change the default client\n     * @param {Client} client the new default client\n     */\n\n\n    defaultClient.setDefaultClient = function setDefaultClient(client) {\n      target = client;\n    };\n    /**\n     * Obtain a direct reference to the current default client\n     * @returns {Client} the default client\n     */\n\n\n    defaultClient.getDefaultClient = function getDefaultClient() {\n      return target;\n    };\n    /**\n     * Reset the default client to the platform default\n     */\n\n\n    defaultClient.resetDefaultClient = function resetDefaultClient() {\n      target = platformDefault;\n    };\n    /**\n     * @private\n     */\n\n\n    defaultClient.setPlatformDefaultClient = function setPlatformDefaultClient(client) {\n      if (platformDefault) {\n        throw new Error('Unable to redefine platformDefaultClient');\n      }\n\n      target = platformDefault = client;\n    };\n\n    return client(defaultClient);\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory(require);\n} // Boilerplate for AMD and Node\n);","map":{"version":3,"names":["define","undef","require","client","target","platformDefault","defaultClient","apply","arguments","setDefaultClient","getDefaultClient","resetDefaultClient","setPlatformDefaultClient","Error","amd","factory","module","exports"],"sources":["D:/Chronicle/chronicle-ttm/src/main/frontend/node_modules/rest/client/default.js"],"sourcesContent":["/*\n * Copyright 2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tvar undef;\n\n\tdefine(function (require) {\n\n\t\t/**\n\t\t * Plain JS Object containing properties that represent an HTTP request.\n\t\t *\n\t\t * Depending on the capabilities of the underlying client, a request\n\t\t * may be cancelable. If a request may be canceled, the client will add\n\t\t * a canceled flag and cancel function to the request object. Canceling\n\t\t * the request will put the response into an error state.\n\t\t *\n\t\t * @field {string} [method='GET'] HTTP method, commonly GET, POST, PUT, DELETE or HEAD\n\t\t * @field {string|UrlBuilder} [path=''] path template with optional path variables\n\t\t * @field {Object} [params] parameters for the path template and query string\n\t\t * @field {Object} [headers] custom HTTP headers to send, in addition to the clients default headers\n\t\t * @field [entity] the HTTP entity, common for POST or PUT requests\n\t\t * @field {boolean} [canceled] true if the request has been canceled, set by the client\n\t\t * @field {Function} [cancel] cancels the request if invoked, provided by the client\n\t\t * @field {Client} [originator] the client that first handled this request, provided by the interceptor\n\t\t *\n\t\t * @class Request\n\t\t */\n\n\t\t/**\n\t\t * Plain JS Object containing properties that represent an HTTP response\n\t\t *\n\t\t * @field {Object} [request] the request object as received by the root client\n\t\t * @field {Object} [raw] the underlying request object, like XmlHttpRequest in a browser\n\t\t * @field {number} [status.code] status code of the response (i.e. 200, 404)\n\t\t * @field {string} [status.text] status phrase of the response\n\t\t * @field {Object] [headers] response headers hash of normalized name, value pairs\n\t\t * @field [entity] the response body\n\t\t *\n\t\t * @class Response\n\t\t */\n\n\t\t/**\n\t\t * HTTP client particularly suited for RESTful operations.\n\t\t *\n\t\t * @field {function} wrap wraps this client with a new interceptor returning the wrapped client\n\t\t *\n\t\t * @param {Request} the HTTP request\n\t\t * @returns {ResponsePromise<Response>} a promise the resolves to the HTTP response\n\t\t *\n\t\t * @class Client\n\t\t */\n\n\t\t /**\n\t\t  * Extended when.js Promises/A+ promise with HTTP specific helpers\n\t\t  *q\n\t\t  * @method entity promise for the HTTP entity\n\t\t  * @method status promise for the HTTP status code\n\t\t  * @method headers promise for the HTTP response headers\n\t\t  * @method header promise for a specific HTTP response header\n\t\t  *\n\t\t  * @class ResponsePromise\n\t\t  * @extends Promise\n\t\t  */\n\n\t\tvar client, target, platformDefault;\n\n\t\tclient = require('../client');\n\n\t\t/**\n\t\t * Make a request with the default client\n\t\t * @param {Request} the HTTP request\n\t\t * @returns {Promise<Response>} a promise the resolves to the HTTP response\n\t\t */\n\t\tfunction defaultClient() {\n\t\t\treturn target.apply(undef, arguments);\n\t\t}\n\n\t\t/**\n\t\t * Change the default client\n\t\t * @param {Client} client the new default client\n\t\t */\n\t\tdefaultClient.setDefaultClient = function setDefaultClient(client) {\n\t\t\ttarget = client;\n\t\t};\n\n\t\t/**\n\t\t * Obtain a direct reference to the current default client\n\t\t * @returns {Client} the default client\n\t\t */\n\t\tdefaultClient.getDefaultClient = function getDefaultClient() {\n\t\t\treturn target;\n\t\t};\n\n\t\t/**\n\t\t * Reset the default client to the platform default\n\t\t */\n\t\tdefaultClient.resetDefaultClient = function resetDefaultClient() {\n\t\t\ttarget = platformDefault;\n\t\t};\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tdefaultClient.setPlatformDefaultClient = function setPlatformDefaultClient(client) {\n\t\t\tif (platformDefault) {\n\t\t\t\tthrow new Error('Unable to redefine platformDefaultClient');\n\t\t\t}\n\t\t\ttarget = platformDefault = client;\n\t\t};\n\n\t\treturn client(defaultClient);\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEC,WAAUA,MAAV,EAAkB;EAClB;;EAEA,IAAIC,KAAJ;EAEAD,MAAM,CAAC,UAAUE,OAAV,EAAmB;IAEzB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAEE,IAAIC,MAAJ,EAAYC,MAAZ,EAAoBC,eAApB;IAEAF,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAhB;IAEA;AACF;AACA;AACA;AACA;;IACE,SAASI,aAAT,GAAyB;MACxB,OAAOF,MAAM,CAACG,KAAP,CAAaN,KAAb,EAAoBO,SAApB,CAAP;IACA;IAED;AACF;AACA;AACA;;;IACEF,aAAa,CAACG,gBAAd,GAAiC,SAASA,gBAAT,CAA0BN,MAA1B,EAAkC;MAClEC,MAAM,GAAGD,MAAT;IACA,CAFD;IAIA;AACF;AACA;AACA;;;IACEG,aAAa,CAACI,gBAAd,GAAiC,SAASA,gBAAT,GAA4B;MAC5D,OAAON,MAAP;IACA,CAFD;IAIA;AACF;AACA;;;IACEE,aAAa,CAACK,kBAAd,GAAmC,SAASA,kBAAT,GAA8B;MAChEP,MAAM,GAAGC,eAAT;IACA,CAFD;IAIA;AACF;AACA;;;IACEC,aAAa,CAACM,wBAAd,GAAyC,SAASA,wBAAT,CAAkCT,MAAlC,EAA0C;MAClF,IAAIE,eAAJ,EAAqB;QACpB,MAAM,IAAIQ,KAAJ,CAAU,0CAAV,CAAN;MACA;;MACDT,MAAM,GAAGC,eAAe,GAAGF,MAA3B;IACA,CALD;;IAOA,OAAOA,MAAM,CAACG,aAAD,CAAb;EAEA,CA1GK,CAAN;AA4GA,CAjHA,EAkHA,OAAON,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACc,GAAvC,GAA6Cd,MAA7C,GAAsD,UAAUe,OAAV,EAAmB;EAAEC,MAAM,CAACC,OAAP,GAAiBF,OAAO,CAACb,OAAD,CAAxB;AAAoC,CAlH/G,CAmHA;AAnHA,CAAD"},"metadata":{},"sourceType":"script"}