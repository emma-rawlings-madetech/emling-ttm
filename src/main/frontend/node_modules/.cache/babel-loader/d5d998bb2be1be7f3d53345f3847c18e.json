{"ast":null,"code":"/*\n * Copyright 2013-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n'use strict';\n\nvar attempt = require('./attempt');\n/**\n * Create a promise whose work is started only when a handler is registered.\n *\n * The work function will be invoked at most once. Thrown values will result\n * in promise rejection.\n *\n * @param {Function} work function whose ouput is used to resolve the\n *   returned promise.\n * @returns {Promise} a lazy promise\n */\n\n\nfunction lazyPromise(work) {\n  var started, resolver, promise, then;\n  started = false;\n  promise = new Promise(function (resolve, reject) {\n    resolver = {\n      resolve: resolve,\n      reject: reject\n    };\n  });\n  then = promise.then;\n\n  promise.then = function () {\n    if (!started) {\n      started = true;\n      attempt(work).then(resolver.resolve, resolver.reject);\n    }\n\n    return then.apply(promise, arguments);\n  };\n\n  return promise;\n}\n\nmodule.exports = lazyPromise;","map":{"version":3,"names":["attempt","require","lazyPromise","work","started","resolver","promise","then","Promise","resolve","reject","apply","arguments","module","exports"],"sources":["D:/Chronicle/chronicle-ttm/src/main/frontend/node_modules/rest/util/lazyPromise.js"],"sourcesContent":["/*\n * Copyright 2013-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar attempt = require('./attempt');\n\n/**\n * Create a promise whose work is started only when a handler is registered.\n *\n * The work function will be invoked at most once. Thrown values will result\n * in promise rejection.\n *\n * @param {Function} work function whose ouput is used to resolve the\n *   returned promise.\n * @returns {Promise} a lazy promise\n */\nfunction lazyPromise(work) {\n\tvar started, resolver, promise, then;\n\n\tstarted = false;\n\n\tpromise = new Promise(function (resolve, reject) {\n\t\tresolver = {\n\t\t\tresolve: resolve,\n\t\t\treject: reject\n\t\t};\n\t});\n\tthen = promise.then;\n\n\tpromise.then = function () {\n\t\tif (!started) {\n\t\t\tstarted = true;\n\t\t\tattempt(work).then(resolver.resolve, resolver.reject);\n\t\t}\n\t\treturn then.apply(promise, arguments);\n\t};\n\n\treturn promise;\n}\n\nmodule.exports = lazyPromise;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;EAC1B,IAAIC,OAAJ,EAAaC,QAAb,EAAuBC,OAAvB,EAAgCC,IAAhC;EAEAH,OAAO,GAAG,KAAV;EAEAE,OAAO,GAAG,IAAIE,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;IAChDL,QAAQ,GAAG;MACVI,OAAO,EAAEA,OADC;MAEVC,MAAM,EAAEA;IAFE,CAAX;EAIA,CALS,CAAV;EAMAH,IAAI,GAAGD,OAAO,CAACC,IAAf;;EAEAD,OAAO,CAACC,IAAR,GAAe,YAAY;IAC1B,IAAI,CAACH,OAAL,EAAc;MACbA,OAAO,GAAG,IAAV;MACAJ,OAAO,CAACG,IAAD,CAAP,CAAcI,IAAd,CAAmBF,QAAQ,CAACI,OAA5B,EAAqCJ,QAAQ,CAACK,MAA9C;IACA;;IACD,OAAOH,IAAI,CAACI,KAAL,CAAWL,OAAX,EAAoBM,SAApB,CAAP;EACA,CAND;;EAQA,OAAON,OAAP;AACA;;AAEDO,MAAM,CAACC,OAAP,GAAiBZ,WAAjB"},"metadata":{},"sourceType":"script"}