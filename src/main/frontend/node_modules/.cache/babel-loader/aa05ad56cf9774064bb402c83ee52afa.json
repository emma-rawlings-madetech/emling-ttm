{"ast":null,"code":"/*\n * Copyright 2012-2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n(function (define) {\n  'use strict';\n\n  define(function (require) {\n    var mime, when, registry;\n    mime = require('../mime');\n    when = require('when');\n\n    function Registry(mimes) {\n      /**\n       * Lookup the converter for a MIME type\n       *\n       * @param {string} type the MIME type\n       * @return a promise for the converter\n       */\n      this.lookup = function lookup(type) {\n        var parsed;\n        parsed = typeof type === 'string' ? mime.parse(type) : type;\n\n        if (mimes[parsed.raw]) {\n          return mimes[parsed.raw];\n        }\n\n        if (mimes[parsed.type + parsed.suffix]) {\n          return mimes[parsed.type + parsed.suffix];\n        }\n\n        if (mimes[parsed.type]) {\n          return mimes[parsed.type];\n        }\n\n        if (mimes[parsed.suffix]) {\n          return mimes[parsed.suffix];\n        }\n\n        return when.reject(new Error('Unable to locate converter for mime \"' + parsed.raw + '\"'));\n      };\n      /**\n       * Create a late dispatched proxy to the target converter.\n       *\n       * Common when a converter is registered under multiple names and\n       * should be kept in sync if updated.\n       *\n       * @param {string} type mime converter to dispatch to\n       * @returns converter whose read/write methods target the desired mime converter\n       */\n\n\n      this.delegate = function delegate(type) {\n        return {\n          read: function () {\n            var args = arguments;\n            return this.lookup(type).then(function (converter) {\n              return converter.read.apply(this, args);\n            }.bind(this));\n          }.bind(this),\n          write: function () {\n            var args = arguments;\n            return this.lookup(type).then(function (converter) {\n              return converter.write.apply(this, args);\n            }.bind(this));\n          }.bind(this)\n        };\n      };\n      /**\n       * Register a custom converter for a MIME type\n       *\n       * @param {string} type the MIME type\n       * @param converter the converter for the MIME type\n       * @return a promise for the converter\n       */\n\n\n      this.register = function register(type, converter) {\n        mimes[type] = when(converter);\n        return mimes[type];\n      };\n      /**\n       * Create a child registry whoes registered converters remain local, while\n       * able to lookup converters from its parent.\n       *\n       * @returns child MIME registry\n       */\n\n\n      this.child = function child() {\n        return new Registry(Object.create(mimes));\n      };\n    }\n\n    registry = new Registry({}); // include provided serializers\n\n    registry.register('application/hal', require('./type/application/hal'));\n    registry.register('application/json', require('./type/application/json'));\n    registry.register('application/x-www-form-urlencoded', require('./type/application/x-www-form-urlencoded'));\n    registry.register('multipart/form-data', require('./type/multipart/form-data'));\n    registry.register('text/plain', require('./type/text/plain'));\n    registry.register('+json', registry.delegate('application/json'));\n    return registry;\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory(require);\n} // Boilerplate for AMD and Node\n);","map":{"version":3,"names":["define","require","mime","when","registry","Registry","mimes","lookup","type","parsed","parse","raw","suffix","reject","Error","delegate","read","args","arguments","then","converter","apply","bind","write","register","child","Object","create","amd","factory","module","exports"],"sources":["D:/Chronicle/chronicle-ttm/src/main/frontend/node_modules/rest/mime/registry.js"],"sourcesContent":["/*\n * Copyright 2012-2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar mime, when, registry;\n\n\t\tmime = require('../mime');\n\t\twhen = require('when');\n\n\t\tfunction Registry(mimes) {\n\n\t\t\t/**\n\t\t\t * Lookup the converter for a MIME type\n\t\t\t *\n\t\t\t * @param {string} type the MIME type\n\t\t\t * @return a promise for the converter\n\t\t\t */\n\t\t\tthis.lookup = function lookup(type) {\n\t\t\t\tvar parsed;\n\n\t\t\t\tparsed = typeof type === 'string' ? mime.parse(type) : type;\n\n\t\t\t\tif (mimes[parsed.raw]) {\n\t\t\t\t\treturn mimes[parsed.raw];\n\t\t\t\t}\n\t\t\t\tif (mimes[parsed.type + parsed.suffix]) {\n\t\t\t\t\treturn mimes[parsed.type + parsed.suffix];\n\t\t\t\t}\n\t\t\t\tif (mimes[parsed.type]) {\n\t\t\t\t\treturn mimes[parsed.type];\n\t\t\t\t}\n\t\t\t\tif (mimes[parsed.suffix]) {\n\t\t\t\t\treturn mimes[parsed.suffix];\n\t\t\t\t}\n\n\t\t\t\treturn when.reject(new Error('Unable to locate converter for mime \"' + parsed.raw + '\"'));\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Create a late dispatched proxy to the target converter.\n\t\t\t *\n\t\t\t * Common when a converter is registered under multiple names and\n\t\t\t * should be kept in sync if updated.\n\t\t\t *\n\t\t\t * @param {string} type mime converter to dispatch to\n\t\t\t * @returns converter whose read/write methods target the desired mime converter\n\t\t\t */\n\t\t\tthis.delegate = function delegate(type) {\n\t\t\t\treturn {\n\t\t\t\t\tread: function () {\n\t\t\t\t\t\tvar args = arguments;\n\t\t\t\t\t\treturn this.lookup(type).then(function (converter) {\n\t\t\t\t\t\t\treturn converter.read.apply(this, args);\n\t\t\t\t\t\t}.bind(this));\n\t\t\t\t\t}.bind(this),\n\t\t\t\t\twrite: function () {\n\t\t\t\t\t\tvar args = arguments;\n\t\t\t\t\t\treturn this.lookup(type).then(function (converter) {\n\t\t\t\t\t\t\treturn converter.write.apply(this, args);\n\t\t\t\t\t\t}.bind(this));\n\t\t\t\t\t}.bind(this)\n\t\t\t\t};\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Register a custom converter for a MIME type\n\t\t\t *\n\t\t\t * @param {string} type the MIME type\n\t\t\t * @param converter the converter for the MIME type\n\t\t\t * @return a promise for the converter\n\t\t\t */\n\t\t\tthis.register = function register(type, converter) {\n\t\t\t\tmimes[type] = when(converter);\n\t\t\t\treturn mimes[type];\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Create a child registry whoes registered converters remain local, while\n\t\t\t * able to lookup converters from its parent.\n\t\t\t *\n\t\t\t * @returns child MIME registry\n\t\t\t */\n\t\t\tthis.child = function child() {\n\t\t\t\treturn new Registry(Object.create(mimes));\n\t\t\t};\n\n\t\t}\n\n\t\tregistry = new Registry({});\n\n\t\t// include provided serializers\n\t\tregistry.register('application/hal', require('./type/application/hal'));\n\t\tregistry.register('application/json', require('./type/application/json'));\n\t\tregistry.register('application/x-www-form-urlencoded', require('./type/application/x-www-form-urlencoded'));\n\t\tregistry.register('multipart/form-data', require('./type/multipart/form-data'));\n\t\tregistry.register('text/plain', require('./type/text/plain'));\n\n\t\tregistry.register('+json', registry.delegate('application/json'));\n\n\t\treturn registry;\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}