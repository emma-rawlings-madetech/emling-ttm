{"ast":null,"code":"/*\n * Copyright 2013 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n(function (define) {\n  'use strict';\n\n  define(function (require) {\n    var when;\n    when = require('when');\n    /**\n     * Create a promise whose work is started only when a handler is registered.\n     *\n     * The work function will be invoked at most once. Thrown values will result\n     * in promise rejection.\n     *\n     * @param {Function} work function whose ouput is used to resolve the\n     *   returned promise.\n     * @returns {Promise} a lazy promise\n     */\n\n    function lazyPromise(work) {\n      var defer, started, resolver, promise, then;\n      defer = when.defer();\n      started = false;\n      resolver = defer.resolver;\n      promise = defer.promise;\n      then = promise.then;\n\n      promise.then = function () {\n        if (!started) {\n          started = true;\n          when.attempt(work).then(resolver.resolve, resolver.reject);\n        }\n\n        return then.apply(promise, arguments);\n      };\n\n      return promise;\n    }\n\n    return lazyPromise;\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory(require);\n} // Boilerplate for AMD and Node\n);","map":{"version":3,"names":["define","require","when","lazyPromise","work","defer","started","resolver","promise","then","attempt","resolve","reject","apply","arguments","amd","factory","module","exports"],"sources":["D:/Chronicle/chronicle-ttm/src/main/frontend/node_modules/rest/util/lazyPromise.js"],"sourcesContent":["/*\n * Copyright 2013 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (require) {\n\n\t\tvar when;\n\n\t\twhen = require('when');\n\n\t\t/**\n\t\t * Create a promise whose work is started only when a handler is registered.\n\t\t *\n\t\t * The work function will be invoked at most once. Thrown values will result\n\t\t * in promise rejection.\n\t\t *\n\t\t * @param {Function} work function whose ouput is used to resolve the\n\t\t *   returned promise.\n\t\t * @returns {Promise} a lazy promise\n\t\t */\n\t\tfunction lazyPromise(work) {\n\t\t\tvar defer, started, resolver, promise, then;\n\n\t\t\tdefer = when.defer();\n\t\t\tstarted = false;\n\n\t\t\tresolver = defer.resolver;\n\t\t\tpromise = defer.promise;\n\t\t\tthen = promise.then;\n\n\t\t\tpromise.then = function () {\n\t\t\t\tif (!started) {\n\t\t\t\t\tstarted = true;\n\t\t\t\t\twhen.attempt(work).then(resolver.resolve, resolver.reject);\n\t\t\t\t}\n\t\t\t\treturn then.apply(promise, arguments);\n\t\t\t};\n\n\t\t\treturn promise;\n\t\t}\n\n\t\treturn lazyPromise;\n\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEC,WAAUA,MAAV,EAAkB;EAClB;;EAEAA,MAAM,CAAC,UAAUC,OAAV,EAAmB;IAEzB,IAAIC,IAAJ;IAEAA,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAd;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACE,SAASE,WAAT,CAAqBC,IAArB,EAA2B;MAC1B,IAAIC,KAAJ,EAAWC,OAAX,EAAoBC,QAApB,EAA8BC,OAA9B,EAAuCC,IAAvC;MAEAJ,KAAK,GAAGH,IAAI,CAACG,KAAL,EAAR;MACAC,OAAO,GAAG,KAAV;MAEAC,QAAQ,GAAGF,KAAK,CAACE,QAAjB;MACAC,OAAO,GAAGH,KAAK,CAACG,OAAhB;MACAC,IAAI,GAAGD,OAAO,CAACC,IAAf;;MAEAD,OAAO,CAACC,IAAR,GAAe,YAAY;QAC1B,IAAI,CAACH,OAAL,EAAc;UACbA,OAAO,GAAG,IAAV;UACAJ,IAAI,CAACQ,OAAL,CAAaN,IAAb,EAAmBK,IAAnB,CAAwBF,QAAQ,CAACI,OAAjC,EAA0CJ,QAAQ,CAACK,MAAnD;QACA;;QACD,OAAOH,IAAI,CAACI,KAAL,CAAWL,OAAX,EAAoBM,SAApB,CAAP;MACA,CAND;;MAQA,OAAON,OAAP;IACA;;IAED,OAAOL,WAAP;EAEA,CAvCK,CAAN;AAyCA,CA5CA,EA6CA,OAAOH,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACe,GAAvC,GAA6Cf,MAA7C,GAAsD,UAAUgB,OAAV,EAAmB;EAAEC,MAAM,CAACC,OAAP,GAAiBF,OAAO,CAACf,OAAD,CAAxB;AAAoC,CA7C/G,CA8CA;AA9CA,CAAD"},"metadata":{},"sourceType":"script"}