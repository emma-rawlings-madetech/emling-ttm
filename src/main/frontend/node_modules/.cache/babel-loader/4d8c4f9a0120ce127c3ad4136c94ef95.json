{"ast":null,"code":"/*\n * Copyright 2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Michael Jackson\n */\n\n/* global FormData, File, Blob */\n(function (define) {\n  'use strict';\n\n  define(function\n    /* require */\n  () {\n    function isFormElement(object) {\n      return object && object.nodeType === 1 && // Node.ELEMENT_NODE\n      object.tagName === 'FORM';\n    }\n\n    function createFormDataFromObject(object) {\n      var formData = new FormData();\n      var value;\n\n      for (var property in object) {\n        if (object.hasOwnProperty(property)) {\n          value = object[property];\n\n          if (value instanceof File) {\n            formData.append(property, value, value.name);\n          } else if (value instanceof Blob) {\n            formData.append(property, value);\n          } else {\n            formData.append(property, String(value));\n          }\n        }\n      }\n\n      return formData;\n    }\n\n    return {\n      write: function write(object) {\n        if (typeof FormData === 'undefined') {\n          throw new Error('The multipart/form-data mime serializer requires FormData support');\n        } // Support FormData directly.\n\n\n        if (object instanceof FormData) {\n          return object;\n        } // Support <form> elements.\n\n\n        if (isFormElement(object)) {\n          return new FormData(object);\n        } // Support plain objects, may contain File/Blob as value.\n\n\n        if (typeof object === 'object' && object !== null) {\n          return createFormDataFromObject(object);\n        }\n\n        throw new Error('Unable to create FormData from object ' + object);\n      }\n    };\n  });\n})(typeof define === 'function' && define.amd ? define : function (factory) {\n  module.exports = factory(require);\n} // Boilerplate for AMD and Node\n);","map":{"version":3,"names":["define","isFormElement","object","nodeType","tagName","createFormDataFromObject","formData","FormData","value","property","hasOwnProperty","File","append","name","Blob","String","write","Error","amd","factory","module","exports","require"],"sources":["D:/Chronicle/chronicle-ttm/src/main/frontend/node_modules/rest/mime/type/multipart/form-data.js"],"sourcesContent":["/*\n * Copyright 2014 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Michael Jackson\n */\n\n/* global FormData, File, Blob */\n\n(function (define) {\n\t'use strict';\n\n\tdefine(function (/* require */) {\n\n\t\tfunction isFormElement(object) {\n\t\t\treturn object &&\n\t\t\t\tobject.nodeType === 1 && // Node.ELEMENT_NODE\n\t\t\t\tobject.tagName === 'FORM';\n\t\t}\n\n\t\tfunction createFormDataFromObject(object) {\n\t\t\tvar formData = new FormData();\n\n\t\t\tvar value;\n\t\t\tfor (var property in object) {\n\t\t\t\tif (object.hasOwnProperty(property)) {\n\t\t\t\t\tvalue = object[property];\n\n\t\t\t\t\tif (value instanceof File) {\n\t\t\t\t\t\tformData.append(property, value, value.name);\n\t\t\t\t\t} else if (value instanceof Blob) {\n\t\t\t\t\t\tformData.append(property, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tformData.append(property, String(value));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn formData;\n\t\t}\n\n\t\treturn {\n\n\t\t\twrite: function (object) {\n\t\t\t\tif (typeof FormData === 'undefined') {\n\t\t\t\t\tthrow new Error('The multipart/form-data mime serializer requires FormData support');\n\t\t\t\t}\n\n\t\t\t\t// Support FormData directly.\n\t\t\t\tif (object instanceof FormData) {\n\t\t\t\t\treturn object;\n\t\t\t\t}\n\n\t\t\t\t// Support <form> elements.\n\t\t\t\tif (isFormElement(object)) {\n\t\t\t\t\treturn new FormData(object);\n\t\t\t\t}\n\n\t\t\t\t// Support plain objects, may contain File/Blob as value.\n\t\t\t\tif (typeof object === 'object' && object !== null) {\n\t\t\t\t\treturn createFormDataFromObject(object);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error('Unable to create FormData from object ' + object);\n\t\t\t}\n\n\t\t};\n\t});\n\n}(\n\ttypeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); }\n\t// Boilerplate for AMD and Node\n));\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEC,WAAUA,MAAV,EAAkB;EAClB;;EAEAA,MAAM,CAAC;IAAU;EAAV,GAAyB;IAE/B,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;MAC9B,OAAOA,MAAM,IACZA,MAAM,CAACC,QAAP,KAAoB,CADd,IACmB;MACzBD,MAAM,CAACE,OAAP,KAAmB,MAFpB;IAGA;;IAED,SAASC,wBAAT,CAAkCH,MAAlC,EAA0C;MACzC,IAAII,QAAQ,GAAG,IAAIC,QAAJ,EAAf;MAEA,IAAIC,KAAJ;;MACA,KAAK,IAAIC,QAAT,IAAqBP,MAArB,EAA6B;QAC5B,IAAIA,MAAM,CAACQ,cAAP,CAAsBD,QAAtB,CAAJ,EAAqC;UACpCD,KAAK,GAAGN,MAAM,CAACO,QAAD,CAAd;;UAEA,IAAID,KAAK,YAAYG,IAArB,EAA2B;YAC1BL,QAAQ,CAACM,MAAT,CAAgBH,QAAhB,EAA0BD,KAA1B,EAAiCA,KAAK,CAACK,IAAvC;UACA,CAFD,MAEO,IAAIL,KAAK,YAAYM,IAArB,EAA2B;YACjCR,QAAQ,CAACM,MAAT,CAAgBH,QAAhB,EAA0BD,KAA1B;UACA,CAFM,MAEA;YACNF,QAAQ,CAACM,MAAT,CAAgBH,QAAhB,EAA0BM,MAAM,CAACP,KAAD,CAAhC;UACA;QACD;MACD;;MAED,OAAOF,QAAP;IACA;;IAED,OAAO;MAENU,KAAK,EAAE,eAAUd,MAAV,EAAkB;QACxB,IAAI,OAAOK,QAAP,KAAoB,WAAxB,EAAqC;UACpC,MAAM,IAAIU,KAAJ,CAAU,mEAAV,CAAN;QACA,CAHuB,CAKxB;;;QACA,IAAIf,MAAM,YAAYK,QAAtB,EAAgC;UAC/B,OAAOL,MAAP;QACA,CARuB,CAUxB;;;QACA,IAAID,aAAa,CAACC,MAAD,CAAjB,EAA2B;UAC1B,OAAO,IAAIK,QAAJ,CAAaL,MAAb,CAAP;QACA,CAbuB,CAexB;;;QACA,IAAI,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,IAA7C,EAAmD;UAClD,OAAOG,wBAAwB,CAACH,MAAD,CAA/B;QACA;;QAED,MAAM,IAAIe,KAAJ,CAAU,2CAA2Cf,MAArD,CAAN;MACA;IAvBK,CAAP;EA0BA,CAvDK,CAAN;AAyDA,CA5DA,EA6DA,OAAOF,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACkB,GAAvC,GAA6ClB,MAA7C,GAAsD,UAAUmB,OAAV,EAAmB;EAAEC,MAAM,CAACC,OAAP,GAAiBF,OAAO,CAACG,OAAD,CAAxB;AAAoC,CA7D/G,CA8DA;AA9DA,CAAD"},"metadata":{},"sourceType":"script"}