{"ast":null,"code":"/*\n * Copyright 2015-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n'use strict';\n\nvar charMap;\n\ncharMap = function () {\n  var strings = {\n    alpha: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n    digit: '0123456789'\n  };\n  strings.genDelims = ':/?#[]@';\n  strings.subDelims = '!$&\\'()*+,;=';\n  strings.reserved = strings.genDelims + strings.subDelims;\n  strings.unreserved = strings.alpha + strings.digit + '-._~';\n  strings.url = strings.reserved + strings.unreserved;\n  strings.scheme = strings.alpha + strings.digit + '+-.';\n  strings.userinfo = strings.unreserved + strings.subDelims + ':';\n  strings.host = strings.unreserved + strings.subDelims;\n  strings.port = strings.digit;\n  strings.pchar = strings.unreserved + strings.subDelims + ':@';\n  strings.segment = strings.pchar;\n  strings.path = strings.segment + '/';\n  strings.query = strings.pchar + '/?';\n  strings.fragment = strings.pchar + '/?';\n  return Object.keys(strings).reduce(function (charMap, set) {\n    charMap[set] = strings[set].split('').reduce(function (chars, myChar) {\n      chars[myChar] = true;\n      return chars;\n    }, {});\n    return charMap;\n  }, {});\n}();\n\nfunction encode(str, allowed) {\n  if (typeof str !== 'string') {\n    throw new Error('String required for URL encoding');\n  }\n\n  return str.split('').map(function (myChar) {\n    if (allowed.hasOwnProperty(myChar)) {\n      return myChar;\n    }\n\n    var code = myChar.charCodeAt(0);\n\n    if (code <= 127) {\n      var encoded = code.toString(16).toUpperCase();\n      return '%' + (encoded.length % 2 === 1 ? '0' : '') + encoded;\n    } else {\n      return encodeURIComponent(myChar).toUpperCase();\n    }\n  }).join('');\n}\n\nfunction makeEncoder(allowed) {\n  allowed = allowed || charMap.unreserved;\n  return function (str) {\n    return encode(str, allowed);\n  };\n}\n\nfunction decode(str) {\n  return decodeURIComponent(str);\n}\n\nmodule.exports = {\n  /*\n   * Decode URL encoded strings\n   *\n   * @param {string} URL encoded string\n   * @returns {string} URL decoded string\n   */\n  decode: decode,\n\n  /*\n   * URL encode a string\n   *\n   * All but alpha-numerics and a very limited set of punctuation - . _ ~ are\n   * encoded.\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encode: makeEncoder(),\n\n  /*\n  * URL encode a URL\n  *\n  * All character permitted anywhere in a URL are left unencoded even\n  * if that character is not permitted in that portion of a URL.\n  *\n  * Note: This method is typically not what you want.\n  *\n  * @param {string} string to encode\n  * @returns {string} URL encoded string\n  */\n  encodeURL: makeEncoder(charMap.url),\n\n  /*\n   * URL encode the scheme portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodeScheme: makeEncoder(charMap.scheme),\n\n  /*\n   * URL encode the user info portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodeUserInfo: makeEncoder(charMap.userinfo),\n\n  /*\n   * URL encode the host portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodeHost: makeEncoder(charMap.host),\n\n  /*\n   * URL encode the port portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodePort: makeEncoder(charMap.port),\n\n  /*\n   * URL encode a path segment portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodePathSegment: makeEncoder(charMap.segment),\n\n  /*\n   * URL encode the path portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodePath: makeEncoder(charMap.path),\n\n  /*\n   * URL encode the query portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodeQuery: makeEncoder(charMap.query),\n\n  /*\n   * URL encode the fragment portion of a URL\n   *\n   * @param {string} string to encode\n   * @returns {string} URL encoded string\n   */\n  encodeFragment: makeEncoder(charMap.fragment)\n};","map":{"version":3,"names":["charMap","strings","alpha","digit","genDelims","subDelims","reserved","unreserved","url","scheme","userinfo","host","port","pchar","segment","path","query","fragment","Object","keys","reduce","set","split","chars","myChar","encode","str","allowed","Error","map","hasOwnProperty","code","charCodeAt","encoded","toString","toUpperCase","length","encodeURIComponent","join","makeEncoder","decode","decodeURIComponent","module","exports","encodeURL","encodeScheme","encodeUserInfo","encodeHost","encodePort","encodePathSegment","encodePath","encodeQuery","encodeFragment"],"sources":["D:/Chronicle/chronicle-ttm/src/main/frontend/node_modules/rest/util/uriEncoder.js"],"sourcesContent":["/*\n * Copyright 2015-2016 the original author or authors\n * @license MIT, see LICENSE.txt for details\n *\n * @author Scott Andrews\n */\n\n'use strict';\n\nvar charMap;\n\ncharMap = (function () {\n\tvar strings = {\n\t\talpha: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n\t\tdigit: '0123456789'\n\t};\n\n\tstrings.genDelims = ':/?#[]@';\n\tstrings.subDelims = '!$&\\'()*+,;=';\n\tstrings.reserved = strings.genDelims + strings.subDelims;\n\tstrings.unreserved = strings.alpha + strings.digit + '-._~';\n\tstrings.url = strings.reserved + strings.unreserved;\n\tstrings.scheme = strings.alpha + strings.digit + '+-.';\n\tstrings.userinfo = strings.unreserved + strings.subDelims + ':';\n\tstrings.host = strings.unreserved + strings.subDelims;\n\tstrings.port = strings.digit;\n\tstrings.pchar = strings.unreserved + strings.subDelims + ':@';\n\tstrings.segment = strings.pchar;\n\tstrings.path = strings.segment + '/';\n\tstrings.query = strings.pchar + '/?';\n\tstrings.fragment = strings.pchar + '/?';\n\n\treturn Object.keys(strings).reduce(function (charMap, set) {\n\t\tcharMap[set] = strings[set].split('').reduce(function (chars, myChar) {\n\t\t\tchars[myChar] = true;\n\t\t\treturn chars;\n\t\t}, {});\n\t\treturn charMap;\n\t}, {});\n}());\n\nfunction encode(str, allowed) {\n\tif (typeof str !== 'string') {\n\t\tthrow new Error('String required for URL encoding');\n\t}\n\treturn str.split('').map(function (myChar) {\n\t\tif (allowed.hasOwnProperty(myChar)) {\n\t\t\treturn myChar;\n\t\t}\n\t\tvar code = myChar.charCodeAt(0);\n\t\tif (code <= 127) {\n\t\t\tvar encoded = code.toString(16).toUpperCase();\n \t\t\treturn '%' + (encoded.length % 2 === 1 ? '0' : '') + encoded;\n\t\t}\n\t\telse {\n\t\t\treturn encodeURIComponent(myChar).toUpperCase();\n\t\t}\n\t}).join('');\n}\n\nfunction makeEncoder(allowed) {\n\tallowed = allowed || charMap.unreserved;\n\treturn function (str) {\n\t\treturn encode(str, allowed);\n\t};\n}\n\nfunction decode(str) {\n\treturn decodeURIComponent(str);\n}\n\nmodule.exports = {\n\n\t/*\n\t * Decode URL encoded strings\n\t *\n\t * @param {string} URL encoded string\n\t * @returns {string} URL decoded string\n\t */\n\tdecode: decode,\n\n\t/*\n\t * URL encode a string\n\t *\n\t * All but alpha-numerics and a very limited set of punctuation - . _ ~ are\n\t * encoded.\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencode: makeEncoder(),\n\n\t/*\n\t* URL encode a URL\n\t*\n\t* All character permitted anywhere in a URL are left unencoded even\n\t* if that character is not permitted in that portion of a URL.\n\t*\n\t* Note: This method is typically not what you want.\n\t*\n\t* @param {string} string to encode\n\t* @returns {string} URL encoded string\n\t*/\n\tencodeURL: makeEncoder(charMap.url),\n\n\t/*\n\t * URL encode the scheme portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodeScheme: makeEncoder(charMap.scheme),\n\n\t/*\n\t * URL encode the user info portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodeUserInfo: makeEncoder(charMap.userinfo),\n\n\t/*\n\t * URL encode the host portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodeHost: makeEncoder(charMap.host),\n\n\t/*\n\t * URL encode the port portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodePort: makeEncoder(charMap.port),\n\n\t/*\n\t * URL encode a path segment portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodePathSegment: makeEncoder(charMap.segment),\n\n\t/*\n\t * URL encode the path portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodePath: makeEncoder(charMap.path),\n\n\t/*\n\t * URL encode the query portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodeQuery: makeEncoder(charMap.query),\n\n\t/*\n\t * URL encode the fragment portion of a URL\n\t *\n\t * @param {string} string to encode\n\t * @returns {string} URL encoded string\n\t */\n\tencodeFragment: makeEncoder(charMap.fragment)\n\n};\n"],"mappings":"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WAAW,EAnBH;;EAqBhB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCK,SAAS,EAAEL,WAAW,CAACvC,OAAO,CAACQ,GAAT,CAhCN;;EAkChB;AACD;AACA;AACA;AACA;AACA;EACCqC,YAAY,EAAEN,WAAW,CAACvC,OAAO,CAACS,MAAT,CAxCT;;EA0ChB;AACD;AACA;AACA;AACA;AACA;EACCqC,cAAc,EAAEP,WAAW,CAACvC,OAAO,CAACU,QAAT,CAhDX;;EAkDhB;AACD;AACA;AACA;AACA;AACA;EACCqC,UAAU,EAAER,WAAW,CAACvC,OAAO,CAACW,IAAT,CAxDP;;EA0DhB;AACD;AACA;AACA;AACA;AACA;EACCqC,UAAU,EAAET,WAAW,CAACvC,OAAO,CAACY,IAAT,CAhEP;;EAkEhB;AACD;AACA;AACA;AACA;AACA;EACCqC,iBAAiB,EAAEV,WAAW,CAACvC,OAAO,CAACc,OAAT,CAxEd;;EA0EhB;AACD;AACA;AACA;AACA;AACA;EACCoC,UAAU,EAAEX,WAAW,CAACvC,OAAO,CAACe,IAAT,CAhFP;;EAkFhB;AACD;AACA;AACA;AACA;AACA;EACCoC,WAAW,EAAEZ,WAAW,CAACvC,OAAO,CAACgB,KAAT,CAxFR;;EA0FhB;AACD;AACA;AACA;AACA;AACA;EACCoC,cAAc,EAAEb,WAAW,CAACvC,OAAO,CAACiB,QAAT;AAhGX,CAAjB"},"metadata":{},"sourceType":"script"}